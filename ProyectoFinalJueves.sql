------


CREATE TABLE CLIENTES(
CLIENTE_ID NUMBER PRIMARY KEY,
NOMBRE VARCHAR2(50),
P_APELLIDO VARCHAR2(50),
S_APELLIDO VARCHAR2(50),
CORREO VARCHAR2(100)
);
--------
CREATE TABLE TELEFONOS(
TELEFONO_ID NUMBER PRIMARY KEY,
CLIENTE_ID NUMBER,
TELEFONO VARCHAR2(15),
CONSTRAINT FK_CLIENTES
FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(CLIENTE_ID)
);
-----
CREATE TABLE PREFERENCIAS(
PREFERENCIAS_ID NUMBER PRIMARY KEY,
CLIENTE_ID NUMBER,
PREFERENCIA VARCHAR2(255),
CONSTRAINT FK_PREFERENCIAS_CLIENTES
FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(CLIENTE_ID)
);

---------
CREATE TABLE PEDIDOS(
PEDIDO_ID NUMBER PRIMARY KEY,
METODO_PAGO_ID NUMBER,
CLIENTE_ID NUMBER,
ESTADO_PEDIDO VARCHAR2(50),
FECHA_ESTIMACION DATE,
FECHA_PEDIDO DATE,
CONSTRAINT FK_PEDIDOS_CLIENTES
FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(CLIENTE_ID),
CONSTRAINT FK_METODOS_PAGO_ID
FOREIGN KEY (METODO_PAGO_ID) REFERENCES METODO_PAGOS (METODO_PAGO_ID)
);
-------
CREATE TABLE DETALLE_PEDIDOS(
DETALLE_PEDIDO_ID NUMBER PRIMARY KEY,
PEDIDO_ID NUMBER,
PRODUCTO_ID NUMBER,
CANTIDAD NUMBER,
CONSTRAINT FK_DETALLE_PEDIDOS_PEDIDOS
FOREIGN KEY (PEDIDO_ID) REFERENCES PEDIDOS(PEDIDO_ID),
CONSTRAINT FK_DETALLE_PEDIDOS_PRODUCTOS
FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(PRODUCTO_ID)
);

CREATE TABLE INVENTARIOS(
INVENTARIO_ID NUMBER PRIMARY KEY,
PRODUCTO_ID NUMBER,
ULTIMA_ACTUALIZACION DATE,
CANTIDAD_DISPONIBLE NUMBER,
CONSTRAINT FK_PRODUCTO
FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(PRODUCTO_ID)
);
---------
CREATE TABLE TIPOMETODOS (
    TIPO_METODO_ID NUMBER PRIMARY KEY,
    METODO_PAGO_ID NUMBER,
    CONSTRAINT FK_TIPOMETODOS_METODOPAGO FOREIGN KEY (METODO_PAGO_ID)
        REFERENCES METODO_PAGOS(METODO_PAGO_ID)
);

-----------
CREATE TABLE METODO_PAGOS (
    METODO_PAGO_ID NUMBER PRIMARY KEY,
    DESCRIPCION_PAGO VARCHAR2(100)
);

---------
CREATE TABLE PRECIOS (
    PRECIO_ID NUMBER PRIMARY KEY,
    PRODUCTO_ID NUMBER,
    PRECIO NUMBER,
    FECHA_VIGENCIA DATE,
    CONSTRAINT FK_PRECIO_PRODUCTOS FOREIGN KEY (PRODUCTO_ID)
        REFERENCES PRODUCTOS(PRODUCTO_ID)
);

-------------
CREATE TABLE CATEGORIA_PRODUCTOS (
    CATEGORIA_ID NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100),
    DESCRIPCION VARCHAR2(200)
);

----------------
CREATE TABLE PRODUCTOS (
    PRODUCTO_ID NUMBER PRIMARY KEY,
    CATEGORIA_ID NUMBER,
    PROVEEDOR_ID NUMBER,
    NOMBRE VARCHAR2(100),
    STOCK NUMBER,
    ESPECIFICACIONES VARCHAR2(200),
    CONSTRAINT FK_PRODUCTOS_CATEGORIA FOREIGN KEY (CATEGORIA_ID)
        REFERENCES CATEGORIA_PRODUCTOS(CATEGORIA_ID),
    CONSTRAINT FK_PRODUCTOS_PROVEEDOR FOREIGN KEY (PROVEEDOR_ID)
        REFERENCES PROVEEDORES(PROVEEDOR_ID)
);

---------
CREATE TABLE DESCUENTOS (
    DESCUENTO_ID NUMBER PRIMARY KEY,
    PRODUCTO_ID NUMBER,
    DESCUENTO NUMBER,
    FECHA_INICIO DATE,
    FECHA_FIN DATE,
    CONSTRAINT FK_DESCUENTOS_PRODUCTO FOREIGN KEY (PRODUCTO_ID)
        REFERENCES PRODUCTOS(PRODUCTO_ID)
);

----------
CREATE TABLE PROVEEDORES (
    PROVEEDOR_ID NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100),
    PRIMER_APELLIDO VARCHAR2(100),
    SEGUNDO_APELLIDO VARCHAR2(100),
    CONTACTO VARCHAR2(20),
    CONDICIONES_COMPRA VARCHAR2(200)
);

-- TELEFONOS
ALTER TABLE TELEFONOS DROP CONSTRAINT FK_CLIENTES;
ALTER TABLE TELEFONOS ADD CONSTRAINT FK_CLIENTES FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(CLIENTE_ID) ON DELETE CASCADE;

-- PREFERENCIAS
ALTER TABLE PREFERENCIAS DROP CONSTRAINT FK_PREFERENCIAS_CLIENTES;
ALTER TABLE PREFERENCIAS ADD CONSTRAINT FK_PREFERENCIAS_CLIENTES FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(CLIENTE_ID) ON DELETE CASCADE;

-- PEDIDOS
ALTER TABLE PEDIDOS DROP CONSTRAINT FK_PEDIDOS_CLIENTES;
ALTER TABLE PEDIDOS ADD CONSTRAINT FK_PEDIDOS_CLIENTES FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(CLIENTE_ID) ON DELETE CASCADE;
ALTER TABLE PEDIDOS DROP CONSTRAINT FK_METODOS_PAGO_ID;
ALTER TABLE PEDIDOS ADD CONSTRAINT FK_METODOS_PAGO_ID FOREIGN KEY (METODO_PAGO_ID) REFERENCES METODO_PAGOS(METODO_PAGO_ID) ON DELETE CASCADE;

-- DETALLE_PEDIDOS
ALTER TABLE DETALLE_PEDIDOS DROP CONSTRAINT FK_DETALLE_PEDIDOS_PEDIDOS;
ALTER TABLE DETALLE_PEDIDOS ADD CONSTRAINT FK_DETALLE_PEDIDOS_PEDIDOS FOREIGN KEY (PEDIDO_ID) REFERENCES PEDIDOS(PEDIDO_ID) ON DELETE CASCADE;
ALTER TABLE DETALLE_PEDIDOS DROP CONSTRAINT FK_DETALLE_PEDIDOS_PRODUCTOS;
ALTER TABLE DETALLE_PEDIDOS ADD CONSTRAINT FK_DETALLE_PEDIDOS_PRODUCTOS FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(PRODUCTO_ID) ON DELETE CASCADE;

-- INVENTARIOS
ALTER TABLE INVENTARIOS DROP CONSTRAINT FK_PRODUCTO;
ALTER TABLE INVENTARIOS ADD CONSTRAINT FK_PRODUCTO FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(PRODUCTO_ID) ON DELETE CASCADE;

-- TIPOMETODOS
ALTER TABLE TIPOMETODOS DROP CONSTRAINT FK_TIPOMETODOS_METODOPAGO;
ALTER TABLE TIPOMETODOS ADD CONSTRAINT FK_TIPOMETODOS_METODOPAGO FOREIGN KEY (METODO_PAGO_ID) REFERENCES METODO_PAGOS(METODO_PAGO_ID) ON DELETE CASCADE;

-- PRECIOS
ALTER TABLE PRECIOS DROP CONSTRAINT FK_PRECIO_PRODUCTOS;
ALTER TABLE PRECIOS ADD CONSTRAINT FK_PRECIO_PRODUCTOS FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(PRODUCTO_ID) ON DELETE CASCADE;

-- PRODUCTOS
ALTER TABLE PRODUCTOS DROP CONSTRAINT FK_PRODUCTOS_CATEGORIA;
ALTER TABLE PRODUCTOS ADD CONSTRAINT FK_PRODUCTOS_CATEGORIA FOREIGN KEY (CATEGORIA_ID) REFERENCES CATEGORIA_PRODUCTOS(CATEGORIA_ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTOS DROP CONSTRAINT FK_PRODUCTOS_PROVEEDOR;
ALTER TABLE PRODUCTOS ADD CONSTRAINT FK_PRODUCTOS_PROVEEDOR FOREIGN KEY (PROVEEDOR_ID) REFERENCES PROVEEDORES(PROVEEDOR_ID) ON DELETE CASCADE;

-- DESCUENTOS
ALTER TABLE DESCUENTOS DROP CONSTRAINT FK_DESCUENTOS_PRODUCTO;
ALTER TABLE DESCUENTOS ADD CONSTRAINT FK_DESCUENTOS_PRODUCTO FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(PRODUCTO_ID) ON DELETE CASCADE;





INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (1, 'Juan', 'Pérez', 'Gómez', 'juan.perez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (2, 'María', 'López', 'Martínez', 'maria.lopez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (3, 'Carlos', 'Hernández', 'Rodríguez', 'carlos.hernandez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (4, 'Ana', 'García', 'Fernández', 'ana.garcia@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (5, 'Luis', 'Sánchez', 'Pérez', 'luis.sanchez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (6, 'Elena', 'Martín', 'López', 'elena.martin@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (7, 'David', 'Gómez', 'Díaz', 'david.gomez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (8, 'Laura', 'Pérez', 'Vázquez', 'laura.perez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (9, 'Pedro', 'Rodríguez', 'Sánchez', 'pedro.rodriguez@example.com');
INSERT INTO CLIENTES (CLIENTE_ID, NOMBRE, P_APELLIDO, S_APELLIDO, CORREO)
VALUES (10, 'Isabel', 'Jiménez', 'Morales', 'isabel.jimenez@example.com');

INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (1, 1, '6123456789');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (2, 2, '6134567890');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (3, 3, '6145678901');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (4, 4, '6156789012');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (5, 5, '6167890123');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (6, 6, '6178901234');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (7, 7, '6189012345');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (8, 8, '6190123456');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (9, 9, '6201234567');
INSERT INTO TELEFONOS (TELEFONO_ID, CLIENTE_ID, TELEFONO)
VALUES (10, 10, '6212345678');

INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (1, 1, 'Prefiere teclados mecanicos');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (2, 2, 'Prefiere mouses innalambricos');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (3, 3, 'Interesado en graficas');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (4, 4, 'Prefiere monitores de 27 pulgadas');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (5, 5, 'Le gustaría comprar un segundo monitor');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (6, 6, 'Prefiere procesadores intel');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (7, 7, 'Interesado en una nueva tarjeta grafica');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (8, 8, 'Prefiere un monitor de 24 pulgadas');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (9, 9, 'Le gustaría un nuevo case para su estudio');
INSERT INTO PREFERENCIAS (PREFERENCIAS_ID, CLIENTE_ID, PREFERENCIA)
VALUES (10, 10, 'Prefiere cambiar la pasta termica el mismo');


INSERT INTO METODO_PAGOS (METODO_PAGO_ID, DESCRIPCION_PAGO)
VALUES (1, 'Tarjeta de crédito');
INSERT INTO METODO_PAGOS (METODO_PAGO_ID, DESCRIPCION_PAGO)
VALUES (2, 'Tarjeta de débito');
INSERT INTO METODO_PAGOS (METODO_PAGO_ID, DESCRIPCION_PAGO)
VALUES (3, 'Transferencia bancaria');
INSERT INTO METODO_PAGOS (METODO_PAGO_ID, DESCRIPCION_PAGO)
VALUES (4, 'Sinpe Movil');


INSERT INTO TIPOMETODOS (TIPO_METODO_ID, METODO_PAGO_ID)
VALUES (1, 1); 
INSERT INTO TIPOMETODOS (TIPO_METODO_ID, METODO_PAGO_ID)
VALUES (2, 2);  
INSERT INTO TIPOMETODOS (TIPO_METODO_ID, METODO_PAGO_ID)
VALUES (3, 3); 
INSERT INTO TIPOMETODOS (TIPO_METODO_ID, METODO_PAGO_ID)
VALUES (4, 4);


INSERT INTO PEDIDOS (PEDIDO_ID, METODO_PAGO_ID, CLIENTE_ID, ESTADO_PEDIDO, FECHA_ESTIMACION, FECHA_PEDIDO)
VALUES (1, 1, 1, 'En preparación', TO_DATE('2024-12-15', 'YYYY-MM-DD'), TO_DATE('2024-11-15', 'YYYY-MM-DD'));
INSERT INTO PEDIDOS (PEDIDO_ID, METODO_PAGO_ID, CLIENTE_ID, ESTADO_PEDIDO, FECHA_ESTIMACION, FECHA_PEDIDO)
VALUES (2, 2, 2, 'Enviado', TO_DATE('2024-12-10', 'YYYY-MM-DD'), TO_DATE('2024-11-10', 'YYYY-MM-DD'));
INSERT INTO PEDIDOS (PEDIDO_ID, METODO_PAGO_ID, CLIENTE_ID, ESTADO_PEDIDO, FECHA_ESTIMACION, FECHA_PEDIDO)
VALUES (3, 3, 3, 'Entregado', TO_DATE('2024-12-05', 'YYYY-MM-DD'), TO_DATE('2024-11-05', 'YYYY-MM-DD'));
INSERT INTO PEDIDOS (PEDIDO_ID, METODO_PAGO_ID, CLIENTE_ID, ESTADO_PEDIDO, FECHA_ESTIMACION, FECHA_PEDIDO)
VALUES (4, 4, 4, 'En preparación', TO_DATE('2024-12-20', 'YYYY-MM-DD'), TO_DATE('2024-11-20', 'YYYY-MM-DD'));



INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (1, 'Computadoras de Escritorio', 'Equipos completos de escritorio para uso doméstico y profesional, con diversas configuraciones.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (2, 'Portátiles', 'Laptops y notebooks de diversas marcas y características, para trabajo, gaming y uso personal.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (3, 'Monitores', 'Pantallas LCD, LED, y pantallas de alta definición para computadoras de escritorio y portátiles.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (4, 'Componentes de PC', 'Placas base (motherboards), tarjetas gráficas, fuentes de poder, memorias RAM y otros componentes internos.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (5, 'Almacenamiento', 'Discos duros (HDD), unidades de estado sólido (SSD), y dispositivos de almacenamiento externo.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (6, 'Periféricos', 'Teclados, ratones, impresoras, auriculares, altavoces y otros accesorios periféricos.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (7, 'Redes y Conectividad', 'Routers, switches, cables Ethernet, adaptadores Wi-Fi y otros dispositivos de red.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (8, 'Sistemas de Enfriamiento', 'Ventiladores, refrigeración líquida, y otros accesorios para mantener la temperatura de los equipos.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (9, 'Software', 'Licencias de software, antivirus, sistemas operativos, y aplicaciones para computadoras.');
INSERT INTO CATEGORIA_PRODUCTOS (CATEGORIA_ID, NOMBRE, DESCRIPCION)
VALUES (10, 'Gaming', 'Equipos, accesorios y componentes especializados para gaming, como PCs, tarjetas gráficas, y teclados mecánicos.');

INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (1, 1, 1, 'PC de Escritorio HP', 15, 'Procesador Intel i5, 8GB RAM, 1TB HDD, Monitor 24"');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (2, 2, 2, 'Laptop Lenovo ThinkPad', 10, 'Procesador AMD Ryzen 7, 16GB RAM, 512GB SSD');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (3, 3, 3, 'Monitor Samsung 27" Curvo', 25, 'Pantalla LED, Resolución 2560x1440, Frecuencia 75Hz');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (4, 4, 4, 'Tarjeta Gráfica NVIDIA GTX 1660', 30, '6GB GDDR5, Conectividad HDMI, DisplayPort');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (5, 5, 5, 'SSD Kingston 1TB', 50, 'Unidad de estado sólido, Conexión SATA, Lectura 550MB/s');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (6, 6, 6, 'Teclado Mecánico Corsair K95', 40, 'Teclas mecánicas Cherry MX, Retroiluminación RGB');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (7, 7, 7, 'Router TP-Link Archer C6', 60, 'Wi-Fi AC1200, 4 puertos LAN, 1 puerto WAN');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (8, 8, 8, 'Windows 10 Pro', 100, 'Licencia de Windows 10 Pro, 32/64-bit, en formato digital');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (9, 9, 9, 'Sistema de Enfriamiento Corsair H100i', 20, 'Refrigeración líquida, 240mm, Compatible con Intel y AMD');
INSERT INTO PRODUCTOS (PRODUCTO_ID, CATEGORIA_ID, PROVEEDOR_ID, NOMBRE, STOCK, ESPECIFICACIONES)
VALUES (10, 10, 10, 'Auriculares Logitech G Pro X', 35, 'Auriculares Gaming, Micrófono desmontable, Sonido envolvente 7.1');

INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (1, 'Juan', 'Pérez', 'Gómez', '51656511', 'Pago neto a 30 días, descuento por volumen de compra');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (2, 'María', 'López', 'Martínez', '65464333', 'Pago adelantado, envío gratuito en compras mayores a $500');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (3, 'Carlos', 'García', 'Sánchez', '65440536', 'Pago neto a 45 días, garantía extendida de 1 año');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (4, 'Laura', 'Rodríguez', 'Fernández', '65616646', 'Pago a 60 días, devolución sin costo durante 30 días');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (5, 'Pedro', 'Hernández', 'Pérez', '54668345', 'Pago a 30 días, envíos urgentes con tarifa adicional');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (6, 'Ana', 'Martínez', 'López', '87474845', 'Pago a 15 días, envío internacional disponible con costo adicional');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (7, 'David', 'González', 'Álvarez', '68546676', 'Pago adelantado, descuentos del 10% en pedidos recurrentes');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (8, 'Isabel', 'Fernández', 'Castro', '74883935', 'Pago a 45 días, opción de financiación en 3 plazos');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (9, 'José', 'Álvarez', 'Ríos', '63319641', 'Pago a 30 días, soporte técnico gratuito durante 6 meses');
INSERT INTO PROVEEDORES (PROVEEDOR_ID, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CONTACTO, CONDICIONES_COMPRA)
VALUES (10, 'Sofía', 'Ramírez', 'Torres', '15655448', 'Pago a 60 días, descuentos por compras mayores a $1000');

INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (1, 1, 10, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-15', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (2, 2, 15, TO_DATE('2024-11-05', 'YYYY-MM-DD'), TO_DATE('2024-11-20', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (3, 3, 20, TO_DATE('2024-11-10', 'YYYY-MM-DD'), TO_DATE('2024-11-30', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (4, 4, 5, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-15', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (5, 5, 12, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-25', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (6, 6, 25, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-30', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (7, 7, 10, TO_DATE('2024-11-10', 'YYYY-MM-DD'), TO_DATE('2024-11-20', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (8, 8, 30, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-30', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (9, 9, 15, TO_DATE('2024-11-05', 'YYYY-MM-DD'), TO_DATE('2024-11-15', 'YYYY-MM-DD'));
INSERT INTO DESCUENTOS (DESCUENTO_ID, PRODUCTO_ID, DESCUENTO, FECHA_INICIO, FECHA_FIN)
VALUES (10, 10, 18, TO_DATE('2024-11-05', 'YYYY-MM-DD'), TO_DATE('2024-11-20', 'YYYY-MM-DD'));


INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (1, 1, 499.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (2, 2, 799.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (3, 3, 199.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (4, 4, 299.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (5, 5, 129.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (6, 6, 119.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (7, 7, 69.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (8, 8, 139.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (9, 9, 89.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO PRECIOS (PRECIO_ID, PRODUCTO_ID, PRECIO, FECHA_VIGENCIA)
VALUES (10, 10, 79.99, TO_DATE('2024-11-01', 'YYYY-MM-DD'));


INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (1, 1, 1, 2); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (2, 1, 2, 1); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (3, 2, 3, 3); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (4, 2, 4, 2); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (5, 3, 5, 5); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (6, 3, 6, 3); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (7, 4, 7, 10); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (8, 4, 8, 7); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (9, 3, 9, 6); 
INSERT INTO DETALLE_PEDIDOS (DETALLE_PEDIDO_ID, PEDIDO_ID, PRODUCTO_ID, CANTIDAD)
VALUES (10, 1, 10, 4); 

INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (1, 1, TO_DATE('2024-11-01', 'YYYY-MM-DD'), 50); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (2, 2, TO_DATE('2024-11-02', 'YYYY-MM-DD'), 30); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (3, 3, TO_DATE('2024-11-03', 'YYYY-MM-DD'), 100); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (4, 4, TO_DATE('2024-11-04', 'YYYY-MM-DD'), 25); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (5, 5, TO_DATE('2024-11-05', 'YYYY-MM-DD'), 10); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (6, 6, TO_DATE('2024-11-06', 'YYYY-MM-DD'), 75); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (7, 7, TO_DATE('2024-11-07', 'YYYY-MM-DD'), 60); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (8, 8, TO_DATE('2024-11-08', 'YYYY-MM-DD'), 150); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (9, 9, TO_DATE('2024-11-09', 'YYYY-MM-DD'), 200); 
INSERT INTO INVENTARIOS (INVENTARIO_ID, PRODUCTO_ID, ULTIMA_ACTUALIZACION, CANTIDAD_DISPONIBLE)
VALUES (10, 10, TO_DATE('2024-11-10', 'YYYY-MM-DD'), 80);


--------------------------------------------
CREATE OR REPLACE VIEW PRODUCTOS_SIN_DESCUENTO AS
SELECT p.PRODUCTO_ID, p.NOMBRE
FROM PRODUCTOS p
LEFT JOIN DESCUENTOS d ON p.PRODUCTO_ID = d.PRODUCTO_ID
WHERE d.PRODUCTO_ID IS NULL;

SELECT * FROM PRODUCTOS_SIN_DESCUENTO;
---------------------------------------------
CREATE OR REPLACE VIEW PEDIDOS_PENDIENTES AS
SELECT PEDIDO_ID, CLIENTE_ID, FECHA_ESTIMACION
FROM PEDIDOS
WHERE ESTADO_PEDIDO = 'En preparación';

SELECT * FROM PEDIDOS_PENDIENTES;
----------------------------------------------
CREATE OR REPLACE VIEW PROVEEDOR_PRODUCTOS AS
SELECT pr.NOMBRE AS PROVEEDOR, p.NOMBRE AS PRODUCTO
FROM PROVEEDORES pr
JOIN PRODUCTOS p ON pr.PROVEEDOR_ID = p.PROVEEDOR_ID;

SELECT * FROM PROVEEDOR_PRODUCTOS;
----------------------------------------------
CREATE OR REPLACE VIEW PEDIDOS_RECIENTES AS
SELECT PEDIDO_ID, CLIENTE_ID, FECHA_PEDIDO, ESTADO_PEDIDO
FROM PEDIDOS
WHERE FECHA_PEDIDO >= SYSDATE - 30;

SELECT * FROM PEDIDOS_RECIENTES;
---------------------------------------------
CREATE OR REPLACE VIEW PRODUCTOS_DESCUENTOS AS
SELECT p.NOMBRE, d.DESCUENTO, d.FECHA_INICIO, d.FECHA_FIN
FROM PRODUCTOS p
JOIN DESCUENTOS d ON p.PRODUCTO_ID = d.PRODUCTO_ID;

SELECT * FROM PRODUCTOS_DESCUENTOS;

--------------------------------------------------------------------------
--Procesos almacenados

--Poder actualizar el estado en el que este el pedido
CREATE OR REPLACE PROCEDURE ACTUALIZAR_ESTADO_PEDIDO(
    p_pedido_id IN NUMBER,
    p_nuevo_estado IN VARCHAR2
) AS
BEGIN
    UPDATE PEDIDOS
    SET ESTADO_PEDIDO = p_nuevo_estado
    WHERE PEDIDO_ID = p_pedido_id;
END;

--Probar el proceso
BEGIN
ACTUALIZAR_ESTADO_PEDIDO(1, 'Entregado');
END;

--------------------------------------------------------------
--Poder obtener productos por la categoria
CREATE OR REPLACE PROCEDURE obtener_productos_categoria(
    p_categoria_id IN NUMBER
) AS
BEGIN
    FOR producto IN (
        SELECT * FROM PRODUCTOS 
        WHERE CATEGORIA_ID = p_categoria_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Producto ID: ' || producto.PRODUCTO_ID ||
                             ', Nombre: ' || producto.NOMBRE ||
                             ', Stock: ' || producto.STOCK);
    END LOOP;
END;

--Probar el proceso
EXEC obtener_productos_categoria(1);
-----------------------------------------------------------------
--Poder registarar nuevos provedores 
CREATE OR REPLACE PROCEDURE REGISTRAR_PROVEEDOR(
    p_nombre IN VARCHAR2,
    p_p_apellido IN VARCHAR2,
    p_s_apellido IN VARCHAR2,
    p_contacto IN VARCHAR2,
    p_condiciones IN VARCHAR2
) AS
BEGIN
    INSERT INTO PROVEEDORES(
        PROVEEDOR_ID,
        NOMBRE,
        PRIMER_APELLIDO,
        SEGUNDO_APELLIDO,
        CONTACTO,
        CONDICIONES_COMPRA
    )
    VALUES(
        (SELECT NVL(MAX(PROVEEDOR_ID), 0) + 1 FROM PROVEEDORES),
        p_nombre,
        p_p_apellido,
        p_s_apellido,
        p_contacto,
        p_condiciones
    );
    
END;

--Probar el proceso
BEGIN
REGISTRAR_PROVEEDOR(
'Sebastian',
'Vargas',
'Araya',
'55553434',
'Envios gratis');
END;
--------------------------------------------------------------
--Actualizar el teléfono del cliente
CREATE OR REPLACE PROCEDURE actualizar_telefono(
    p_cliente_id NUMBER,
    p_nuevo_telefono VARCHAR2
) AS
BEGIN
    UPDATE TELEFONOS 
    SET TELEFONO = p_nuevo_telefono
    WHERE CLIENTE_ID = p_cliente_id;
    COMMIT;
END;

--Probar el proceso
BEGIN
actualizar_telefono (1, '1111144444');
END;
-------------------------------------------------------------

--Obtener los pedidos por cada cliente
CREATE OR REPLACE PROCEDURE obtener_pedidos_cliente(
    p_cliente_id NUMBER
) AS
BEGIN
FOR PEDIDO  IN (SELECT * FROM PEDIDOS WHERE CLIENTE_ID = p_cliente_id)
LOOP 
DBMS_OUTPUT.PUT_LINE('Pedido Id: ' || PEDIDO.PEDIDO_ID || 
    '-- Cliente Id: ' || PEDIDO.CLIENTE_ID || 
    '-- Estado del pedido: ' || PEDIDO.ESTADO_PEDIDO || 
    '-- Fecha del pedido: ' || PEDIDO.FECHA_PEDIDO);
    END LOOP;
END;

--Probar el proceso
DECLARE
 p_cliente_id NUMBER := 1;
 BEGIN
 obtener_pedidos_cliente(p_cliente_id);
 END;
-----------------------------------------------------------
-- Ver los productos que se encuentran en un rango determinado de precio
CREATE OR REPLACE PROCEDURE productos_rango_precio(
    p_precio_min IN NUMBER,
    p_precio_max IN NUMBER
) AS
BEGIN
    FOR producto IN (
        SELECT p.PRODUCTO_ID, p.NOMBRE, pr.PRECIO
        FROM PRODUCTOS p
        JOIN PRECIOS pr ON p.PRODUCTO_ID = pr.PRODUCTO_ID
        WHERE pr.PRECIO BETWEEN p_precio_min AND p_precio_max
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Producto ID: ' || producto.PRODUCTO_ID ||
                             ', Nombre: ' || producto.NOMBRE ||
                             ', Precio: ' || producto.PRECIO);
    END LOOP;
END;

--Probar el proceso
EXEC productos_rango_precio(100,500);
--------------------------
--poder ver los productos que tengan bajo stock 
CREATE OR REPLACE PROCEDURE productos_bajo_stock(
    p_limite_stock NUMBER
) AS
BEGIN
   FOR PRODUCTO IN (
    SELECT * FROM PRODUCTOS WHERE STOCK <= p_limite_stock)
    LOOP 
    DBMS_OUTPUT.PUT_LINE('Producto Id: ' || PRODUCTO.PRODUCTO_ID || 
    '-- Nombre: ' || PRODUCTO.NOMBRE || 
    '-- Stock: ' || PRODUCTO.STOCK);
    END LOOP;
END;

--Probar el proceso
DECLARE
 p_limite_stock NUMBER := 20;
 BEGIN
 productos_bajo_stock(p_limite_stock);
 END;
 -------
 
 
 --Procesos de Kendall
 
 -----Proceso almacenado para obtener un cliente por medio del ID
CREATE OR REPLACE PROCEDURE obtener_cliente(clien_id IN NUMBER)AS
    nombre VARCHAR2(50);
    correo VARCHAR2(100);
BEGIN 
    SELECT NOMBRE|| ' ' || P_APELLIDO || ' ' || S_APELLIDO,CORREO INTO nombre
    ,correo
    FROM CLIENTES
    WHERE CLIENTE_ID = clien_id;
    DBMS_OUTPUT.PUT_LINE('El cliente: '|| nombre || ' correo: ' || correo);
   
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
                DBMS_OUTPUT.PUT_LINE('Cliente no encontrado');
END;

 
EXECUTE obtener_cliente(11);

-----Proceso almacenado para actualizar el stock de un producto
CREATE OR REPLACE PROCEDURE actualizar_stock
(produc_id IN NUMBER,can_disponible IN NUMBER)AS
BEGIN
    UPDATE INVENTARIOS
    SET CANTIDAD_DISPONIBLE = can_disponible,
        ULTIMA_ACTUALIZACION = SYSDATE
    WHERE PRODUCTO_ID = produc_id;
        DBMS_OUTPUT.PUT_LINE('Stock del producto: '|| produc_id
        ||' actualizado' );
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
                DBMS_OUTPUT.PUT_LINE('Producto no encontrado'); 
END;

EXEC actualizar_stock(1,1);


-----Proceso almacenado para obtener toda la informacion de un proveedor
-----por medio del ID
CREATE OR REPLACE PROCEDURE obtener_proveedor(provee_id IN NUMBER)AS
    nombre VARCHAR2(50);
    contacto VARCHAR2(100);
    condicion VARCHAR2(100);
BEGIN 
    SELECT NOMBRE|| ' ' || PRIMER_APELLIDO || ' ' || SEGUNDO_APELLIDO,CONTACTO
    ,CONDICIONES_COMPRA
    INTO nombre,contacto,condicion
    FROM PROVEEDORES
    WHERE PROVEEDOR_ID = provee_id;
    DBMS_OUTPUT.PUT_LINE('Proveedor: '|| nombre || ' contacto: ' || contacto 
    || ' condicion: ' ||condicion);
   
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
                DBMS_OUTPUT.PUT_LINE('Proveedor no encontrado');
END;

EXEC obtener_proveedor(10);


--NUEVIOS 6 PROCEDIMIENTOS
CREATE OR REPLACE PROCEDURE contar_pedidos_activos AS
    pedidos_activos NUMBER;
BEGIN
    SELECT COUNT(*) INTO pedidos_activos
    FROM PEDIDOS 
    WHERE ESTADO_PEDIDO NOT IN ('Entregado', 'Cancelado');
    
    DBMS_OUTPUT.PUT_LINE('Pedidos activos: ' || pedidos_activos);
END;

BEGIN
contar_pedidos_activos;
END;


CREATE OR REPLACE PROCEDURE contar_clientes AS
    total_clientes NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_clientes
    FROM CLIENTES;
    
    DBMS_OUTPUT.PUT_LINE('Total de clientes registrados: ' || total_clientes);
END;

BEGIN
contar_clientes;
END;

CREATE OR REPLACE PROCEDURE verificar_stock_producto (
    producto_id IN NUMBER
) AS
    stock NUMBER;
    nombre VARCHAR2(100);
BEGIN
    SELECT STOCK, NOMBRE INTO stock, nombre 
    FROM PRODUCTOS 
    WHERE PRODUCTO_ID = producto_id
    AND ROWNUM = 1;
    
    
    DBMS_OUTPUT.PUT_LINE('Producto: ' || nombre);
    DBMS_OUTPUT.PUT_LINE('Stock Disponible: ' || stock);
END;

BEGIN
verificar_stock_producto(1);
END;

CREATE OR REPLACE PROCEDURE contar_proveedores AS
    total NUMBER;
BEGIN
    SELECT COUNT(*) INTO total FROM PROVEEDORES;
    DBMS_OUTPUT.PUT_LINE('Total de Proveedores: ' || total);
END;

BEGIN
contar_proveedores;
END;

CREATE OR REPLACE PROCEDURE clientes_multiples_pedidos AS
BEGIN
    FOR cliente IN (
        SELECT c.NOMBRE, c.P_APELLIDO, COUNT(p.PEDIDO_ID) AS cantidad_pedidos
        FROM CLIENTES c
        JOIN PEDIDOS p ON c.CLIENTE_ID = p.CLIENTE_ID
        GROUP BY c.NOMBRE, c.P_APELLIDO
        HAVING COUNT(p.PEDIDO_ID) > 1
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || cliente.NOMBRE || ' ' || cliente.P_APELLIDO || ', Pedidos: ' || cliente.cantidad_pedidos);
    END LOOP;
END;

BEGIN
clientes_multiples_pedidos;
END;

CREATE OR REPLACE PROCEDURE consultar_inventario_producto(
    producto_id NUMBER
) AS
    cantidad NUMBER;
BEGIN
    SELECT CANTIDAD_DISPONIBLE
    INTO cantidad
    FROM INVENTARIOS
    WHERE PRODUCTO_ID = producto_id
    AND ROWNUM = 1;

    DBMS_OUTPUT.PUT_LINE('Cantidad disponible: ' || cantidad);
END;

BEGIN
consultar_inventario_producto(1);
END;

CREATE OR REPLACE FUNCTION listar_clientes_top_pedidos(p_min_pedidos NUMBER)
RETURN SYS_REFCURSOR
AS
    resultado SYS_REFCURSOR;
BEGIN
    OPEN resultado FOR
        SELECT c.CLIENTE_ID, c.NOMBRE, c.P_APELLIDO, COUNT(p.PEDIDO_ID) AS total_pedidos
        FROM CLIENTES c
        LEFT JOIN PEDIDOS p ON c.CLIENTE_ID = p.CLIENTE_ID
        GROUP BY c.CLIENTE_ID, c.NOMBRE, c.P_APELLIDO
        HAVING COUNT(p.PEDIDO_ID) > p_min_pedidos
        ORDER BY total_pedidos DESC;
    
    RETURN resultado;
END;

DECLARE
   clientes_top SYS_REFCURSOR;
   cliente_id CLIENTES.CLIENTE_ID%TYPE;
   nombre CLIENTES.NOMBRE%TYPE;
   apellido CLIENTES.P_APELLIDO%TYPE;
   total_pedidos NUMBER;
BEGIN
   clientes_top := listar_clientes_top_pedidos(2); 
   
   LOOP
      FETCH clientes_top INTO cliente_id, nombre, apellido, total_pedidos;
      EXIT WHEN clientes_top%NOTFOUND;
      
      DBMS_OUTPUT.PUT_LINE('Cliente: ' || nombre || ' ' || apellido || 
                            ', ID: ' || cliente_id || 
                            ', Total Pedidos: ' || total_pedidos);
   END LOOP;
   
   CLOSE clientes_top;
END;

--
CREATE OR REPLACE FUNCTION productos_por_agotarse(p_agotarse_stock NUMBER)
RETURN SYS_REFCURSOR
AS
    c_productos_criticos SYS_REFCURSOR;
BEGIN
    OPEN c_productos_criticos FOR
        SELECT p.PRODUCTO_ID, p.NOMBRE, p.STOCK, c.NOMBRE AS categoria
        FROM PRODUCTOS p
        JOIN CATEGORIA_PRODUCTOS c ON p.CATEGORIA_ID = c.CATEGORIA_ID
        WHERE p.STOCK <= p_agotarse_stock
        ORDER BY p.STOCK ASC;
    
    RETURN c_productos_criticos;
END;

DECLARE
   c_productos_criticos SYS_REFCURSOR;
   producto_id PRODUCTOS.PRODUCTO_ID%TYPE;
   nombre PRODUCTOS.NOMBRE%TYPE;
   stock PRODUCTOS.STOCK%TYPE;
   categoria CATEGORIA_PRODUCTOS.NOMBRE%TYPE;
BEGIN
   c_productos_criticos := productos_por_agotarse(40); 
   
   LOOP
      FETCH c_productos_criticos INTO producto_id, nombre, stock, categoria;
      EXIT WHEN c_productos_criticos%NOTFOUND;
      
      DBMS_OUTPUT.PUT_LINE('Producto: ' || nombre || 
                            ', ID: ' || producto_id || 
                            ', Stock: ' || stock || 
                            ', Categoría: ' || categoria);
   END LOOP;
   
   CLOSE c_productos_criticos;
END;


CREATE OR REPLACE FUNCTION total_productos_pedido(
    pedidoId IN NUMBER
) RETURN NUMBER AS
    c_productos SYS_REFCURSOR;
    total_productos NUMBER := 0;
    cantidad NUMBER;
BEGIN
    OPEN c_productos FOR
        SELECT CANTIDAD
        FROM DETALLE_PEDIDOS
        WHERE PEDIDO_ID = pedidoId;

    LOOP
        FETCH c_productos INTO cantidad;
        EXIT WHEN c_productos%NOTFOUND;
        total_productos := total_productos + cantidad;
    END LOOP;

    CLOSE c_productos;
    RETURN total_productos;
END;

--probar
DECLARE
    total NUMBER;
BEGIN
    total := total_productos_pedido(1);
    DBMS_OUTPUT.PUT_LINE('Total de productos vendidos: ' || total);
END;

--
CREATE OR REPLACE FUNCTION stock_total_proveedor(
    proveedorId IN NUMBER
) RETURN NUMBER AS
    c_stock SYS_REFCURSOR;
    stock_total NUMBER := 0;
    stock NUMBER;
BEGIN
    OPEN c_stock FOR
        SELECT STOCK
        FROM PRODUCTOS
        WHERE PROVEEDOR_ID = proveedorId;

    LOOP
        FETCH c_stock INTO stock;
        EXIT WHEN c_stock%NOTFOUND;
        stock_total := stock_total + stock;
    END LOOP;

    CLOSE c_stock;
    RETURN stock_total;
END;

--probar
DECLARE
    total_stock NUMBER;
BEGIN
    total_stock := stock_total_proveedor(2);
    DBMS_OUTPUT.PUT_LINE('Stock total del proveedor: ' || total_stock);
END;

--
CREATE OR REPLACE FUNCTION total_descuentos_producto(
    productoId IN NUMBER
) RETURN NUMBER AS
    c_descuentos SYS_REFCURSOR;
    total_descuento NUMBER := 0;
    descuento NUMBER;
BEGIN
    OPEN c_descuentos FOR
        SELECT DESCUENTO
        FROM DESCUENTOS
        WHERE PRODUCTO_ID = productoId;

    LOOP
        FETCH c_descuentos INTO descuento;
        EXIT WHEN c_descuentos%NOTFOUND;
        total_descuento := total_descuento + descuento;
    END LOOP;

    CLOSE c_descuentos;
    RETURN total_descuento;
END;

--probar
DECLARE
    total_descuento NUMBER;
BEGIN
    total_descuento := total_descuentos_producto(3);
    DBMS_OUTPUT.PUT_LINE('Total de descuentos aplicados: ' || total_descuento);
END;

--
CREATE OR REPLACE FUNCTION pedidos_entregados_cliente(
    clienteId IN NUMBER
) RETURN NUMBER AS
    c_pedidos SYS_REFCURSOR;
    total_entregados NUMBER := 0;
    estado VARCHAR2(50);
BEGIN
    OPEN c_pedidos FOR
        SELECT ESTADO_PEDIDO
        FROM PEDIDOS
        WHERE CLIENTE_ID = clienteId AND ESTADO_PEDIDO = 'Entregado';

    LOOP
        FETCH c_pedidos INTO estado;
        EXIT WHEN c_pedidos%NOTFOUND;
        total_entregados := total_entregados + 1;
    END LOOP;

    CLOSE c_pedidos;
    RETURN total_entregados;
END;

--probar
DECLARE
    entregados NUMBER;
BEGIN
    entregados := pedidos_entregados_cliente(3);
    DBMS_OUTPUT.PUT_LINE('Pedidos entregados: ' || entregados);
END;

--
CREATE OR REPLACE FUNCTION suma_precios_inventario RETURN NUMBER AS
    c_precios SYS_REFCURSOR;
    total_precio NUMBER := 0;
    precio NUMBER;
BEGIN
    OPEN c_precios FOR
        SELECT PRECIO
        FROM PRECIOS
        WHERE FECHA_VIGENCIA <= SYSDATE;

    LOOP
        FETCH c_precios INTO precio;
        EXIT WHEN c_precios%NOTFOUND;
        total_precio := total_precio + precio;
    END LOOP;

    CLOSE c_precios;
    RETURN total_precio;
END;

--probar
DECLARE
    total_precio NUMBER;
BEGIN
    total_precio := suma_precios_inventario;
    DBMS_OUTPUT.PUT_LINE('Suma total de precios en inventario: ' || total_precio);
END;

--
CREATE OR REPLACE FUNCTION clientes_pedidos_activos RETURN NUMBER AS
    c_clientes SYS_REFCURSOR;
    total_clientes NUMBER := 0;
    cliente_id NUMBER;
BEGIN
    OPEN c_clientes FOR
        SELECT CLIENTE_ID
        FROM PEDIDOS
        WHERE ESTADO_PEDIDO = 'ACTIVO'
        GROUP BY CLIENTE_ID
        HAVING COUNT(*) > 1;

    LOOP
        FETCH c_clientes INTO cliente_id;
        EXIT WHEN c_clientes%NOTFOUND;
        total_clientes := total_clientes + 1;
    END LOOP;

    CLOSE c_clientes;
    RETURN total_clientes;
END;

--probar
DECLARE
    clientes NUMBER;
BEGIN
    clientes := clientes_pedidos_activos;
    DBMS_OUTPUT.PUT_LINE('Clientes con más de un pedido activo: ' || clientes);
END;

--
CREATE OR REPLACE FUNCTION verificar_productos_bajo_stock(
    limite IN NUMBER
) RETURN NUMBER AS
    c_productos SYS_REFCURSOR;
    total_bajo_stock NUMBER := 0;
    producto_id NUMBER;
BEGIN
    OPEN c_productos FOR
        SELECT PRODUCTO_ID
        FROM PRODUCTOS
        WHERE STOCK < limite;

    LOOP
        FETCH c_productos INTO producto_id;
        EXIT WHEN c_productos%NOTFOUND;
        total_bajo_stock := total_bajo_stock + 1;
    END LOOP;

    CLOSE c_productos;
    RETURN total_bajo_stock;
END;

--probar
DECLARE
    bajo_stock NUMBER;
BEGIN
    bajo_stock := verificar_productos_bajo_stock(20);
    DBMS_OUTPUT.PUT_LINE('Productos bajo stock: ' || bajo_stock);
END;

--
CREATE OR REPLACE FUNCTION categorias_con_productos 
RETURN NUMBER AS
    c_categorias SYS_REFCURSOR;
    total_categorias NUMBER := 0;
    categoria_id NUMBER;
BEGIN
    OPEN c_categorias FOR
        SELECT DISTINCT CATEGORIA_ID
        FROM PRODUCTOS;

    LOOP
        FETCH c_categorias INTO categoria_id;
        EXIT WHEN c_categorias%NOTFOUND;
        total_categorias := total_categorias + 1;
    END LOOP;

    CLOSE c_categorias;
    RETURN total_categorias;
END;

--probar
DECLARE
    total NUMBER;
BEGIN
    total := categorias_con_productos;
    DBMS_OUTPUT.PUT_LINE('Total de categorías con productos: ' || total);
END;

